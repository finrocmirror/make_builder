#!/usr/bin/perl -w

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# 
#----------------------------------------------------------------------
# \file    enum_strings_builder
#
# \author  Max Reichardt
# \author  Tobias FÃ¶hst
#
# \date    2011-08-24
#
# Script to auto-generate port names for finroc modules in the build process.
# It operates on doxygen perlmod output.
#
# It creates a .cpp file with port names for all modules and groups that contain ports.
#----------------------------------------------------------------------

use strict;
use DoxyDocs;


my $output_filename = $ARGV[0] or die "Output filename not specified!\n";

unlink $output_filename;

my $output = "";



sub GetCommonEnumPrefix($)
{
    my ($values) = @_;

    return "" unless $$values[0] =~ /^e/;
    return "e" if @$values == 1;

    my $common_prefix = $$values[0];
    foreach my $value (@$values)
    {
        while (length $common_prefix)
        {
            last if $common_prefix eq substr $value, 0, length $common_prefix;
            $common_prefix = substr $common_prefix, 0, -1 + length $common_prefix;
        }
    }

    return $common_prefix;
}

sub ValidateEnumValue($$)
{
    my ($value, $common_prefix) = @_;

    my $upper_case_part = substr $value, $common_prefix ne "";
    
    return ($upper_case_part eq uc $upper_case_part and $value =~ /^$common_prefix/ and length $value > length $common_prefix);
}

sub ReportInvalidEnumerationAndDie($$)
{
    my ($enum, $names) = @_;

    my @enum_name_parts = split "::", $enum;

    my ($filename, $line) = ("unknown file", "?");

    my $find_files_command = sprintf "find -L -name %s", join " -o -name ", map { $$_{'name'}; } @{$$::doxydocs{'files'}};
    my $filter_files_command = sprintf "grep -l %s", $enum_name_parts[0];
    foreach my $file (`$find_files_command | xargs $filter_files_command`)
    {
        $file =~ s/^.\///;

        my $file_found = 1;
        foreach my $enum_name_part (@enum_name_parts)
        {
            $file_found = 0 unless `grep $enum_name_part $file`;
        }
        next unless $file_found;
        
        my $extract_declaration_command = sprintf "grep -Hn 'enum.* %s' %s", $enum_name_parts[-1], $file;
        if (my $declaration = `$extract_declaration_command`)
        {
            ($filename, $line) = split ":", $declaration;
	    last;
        }
    }

    die sprintf "$filename:$line: error: enumeration violates code conventions: %s = { %s }\n".
		        "$filename:$line: note: see http://www.finroc.org/wiki/Code%%20Conventions for more information\n", $enum, join ", ", @$names;
}

sub ProcessEnum($$$)
{
    my ($namespace, $enum, $values) = @_;

    return unless defined $values and @$values;
    return if "@" eq substr $enum, 0, 1;

    my @names = map { $$_{'name'} } @$values;

    ReportInvalidEnumerationAndDie $enum, \@names unless $enum =~ /^t[A-Z][^_]*$/;

    $enum = sprintf "%s::%s", $namespace, $enum;

    my $array_name = $enum;
    $array_name =~ s/::/_/g;

    my $common_prefix = GetCommonEnumPrefix \@names;
    foreach my $name (@names)
    {
        ReportInvalidEnumerationAndDie $enum, \@names unless ValidateEnumValue $name, $common_prefix;
    }

    return unless @names;

    @names = map { substr $_, length $common_prefix; } @names;
    pop @names if $names[-1] eq "DIMENSION";

    $output .= sprintf "const char *strings_%s_natural[] = {\n  \"%s\"\n};\n", $array_name, join "\",\n  \"", map { join " ", map ucfirst, map lc, split "_" } @names;
    $output .= sprintf "const char *strings_%s_upper[] = {\n  \"%s\"\n};\n", $array_name, join "\",\n  \"", map { uc } @names;
    $output .= sprintf "const char *strings_%s_lower[] = {\n  \"%s\"\n};\n", $array_name, join "\",\n  \"", map { lc } @names;
    $output .= sprintf "const char *strings_%s_camel[] = {\n  \"%s\"\n};\n", $array_name, join "\",\n  \"", map { join "", map ucfirst, map lc, split "_" } @names;
    $output .= sprintf "const internal::tEnumStrings enum_strings_%s = { { strings_%s_natural, strings_%s_upper, strings_%s_lower, strings_%s_camel }, %d };\n", $array_name, $array_name, $array_name, $array_name, $array_name, scalar @names;
    $output .= sprintf "__attribute__ ((init_priority (101))) static internal::tRegisterEnumStrings init_strings_%s(\"%s\", enum_strings_%s);\n", $array_name, $enum, $array_name;
    $output .= sprintf "\n";
}


# generate code for outer-class enum strings
foreach my $namespace (@{$$::doxydocs{'namespaces'}})
{
    foreach my $enum (@{$$namespace{'enums'}{'members'}})
    {
        ProcessEnum $$namespace{'name'}, $$enum{'name'}, $$enum{'values'};
    }
}

# generate code for enums defined in classes
foreach my $class (@{$$::doxydocs{'classes'}})
{
    foreach my $member (@{$$class{'public_typedefs'}{'members'}})
    {
        next unless $$member{'kind'} eq "enum" and length $$member{'name'};
        ProcessEnum $$class{'name'}, $$member{'name'}, $$member{'values'};
    }
}



open OUTPUT, ">$output_filename" or die "Could not open '$output_filename' for writing: $!\n";

# generate header comment
my @files = @{$$::doxydocs{'files'}};
printf OUTPUT "/*\n";
printf OUTPUT " * This file was automatically generated by enum_strings_builder from\n";
printf OUTPUT " * the following source file%s:\n", scalar @files > 1 ? "s" : "";
printf OUTPUT " * %s\n", join "\n * ", (map { $$_{'name'} } @files);
printf OUTPUT " *\n";
printf OUTPUT " * This code is released under the same license as the source files.\n";
printf OUTPUT " */\n\n";

# namespace
printf OUTPUT "namespace make_builder\n{\nnamespace generated\n{\n\n";

print OUTPUT $output;

printf OUTPUT "}\n}\n";

close OUTPUT;
